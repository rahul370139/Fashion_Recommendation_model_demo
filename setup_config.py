#!/usr/bin/env python3
"""
Interactive setup script for Multimodal Fashion Retrieval System
Guides users through filling configuration placeholders
"""

import os
import sys
from pathlib import Path

def get_user_input(prompt, default="", required=True):
    """Get user input with validation"""
    while True:
        if default:
            user_input = input(f"{prompt} (default: {default}): ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if user_input or not required:
            return user_input
        else:
            print("‚ùå This field is required. Please enter a value.")

def setup_supabase():
    """Interactive Supabase setup"""
    print("\nüîß Supabase Configuration")
    print("=" * 40)
    print("To get your Supabase credentials:")
    print("1. Go to https://supabase.com/dashboard")
    print("2. Create a new project or select existing one")
    print("3. Go to Settings > API")
    print("4. Copy the Project URL and anon/public key")
    print()
    
    supabase_url = get_user_input(
        "Enter your Supabase URL",
        default="https://your-project-id.supabase.co"
    )
    
    supabase_key = get_user_input(
        "Enter your Supabase anon key",
        default="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    )
    
    return supabase_url, supabase_key

def setup_github():
    """Interactive GitHub setup"""
    print("\nüîß GitHub Configuration")
    print("=" * 40)
    print("Enter your GitHub repository information for documentation links")
    print()
    
    github_repo = get_user_input(
        "Enter your GitHub repository slug (username/repo-name)",
        default="rahulsharma/multimodal-fashion-retrieval"
    )
    
    return github_repo

def update_config_file(supabase_url, supabase_key, github_repo):
    """Update config.py with user values"""
    config_content = f'''"""
Configuration file for Multimodal Fashion Retrieval System
Auto-generated by setup_config.py
"""

# =============================================================================
# Supabase Configuration
# =============================================================================
SUPABASE_URL = "{supabase_url}"
SUPABASE_KEY = "{supabase_key}"

# =============================================================================
# GitHub Configuration
# =============================================================================
GITHUB_REPO_SLUG = "{github_repo}"
GITHUB_REPO_URL = f"https://github.com/{{GITHUB_REPO_SLUG}}"

# =============================================================================
# System Configuration
# =============================================================================

# CLIP Model Configuration
CLIP_MODEL = "ViT-B/32"
DEVICE = "auto"  # Will auto-detect: mps (Apple Silicon), cuda, or cpu

# FAISS Configuration
FAISS_INDEX_TYPE = "IndexFlatIP"  # Inner product for cosine similarity
FAISS_DIMENSION = 512  # CLIP ViT-B/32 embedding dimension

# Search Configuration
DEFAULT_TOP_K = 10
DEFAULT_ALPHA = 0.5  # Default image/text blending weight

# File Paths
DEFAULT_EMBEDDINGS_FILE = "embeddings.npy"
DEFAULT_PATHS_FILE = "index_paths.txt"

# Environment Variables
KMP_DUPLICATE_LIB_OK = "TRUE"  # Required for FAISS on macOS

# =============================================================================
# Validation Functions
# =============================================================================

def validate_config():
    """Validate that all required configuration is set"""
    issues = []
    
    if SUPABASE_URL == "https://your-project-id.supabase.co":
        issues.append("SUPABASE_URL not configured")
    
    if SUPABASE_KEY == "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...":
        issues.append("SUPABASE_KEY not configured")
    
    if GITHUB_REPO_SLUG == "rahulsharma/multimodal-fashion-retrieval":
        issues.append("GITHUB_REPO_SLUG not configured")
    
    if issues:
        print("‚ö†Ô∏è Configuration issues found:")
        for issue in issues:
            print(f"   - {{issue}}")
        print("\\nPlease update config.py with your actual values.")
        return False
    
    print("‚úÖ Configuration validated successfully!")
    return True

if __name__ == "__main__":
    validate_config()
'''
    
    with open("config.py", "w") as f:
        f.write(config_content)
    
    print("‚úÖ Updated config.py with your configuration")

def create_env_file(supabase_url, supabase_key, github_repo):
    """Create .env file for environment variables"""
    env_content = f"""# Supabase Configuration
SUPABASE_URL={supabase_url}
SUPABASE_KEY={supabase_key}

# GitHub Configuration
GITHUB_REPO_SLUG={github_repo}

# System Configuration (optional - defaults are good)
CLIP_MODEL=ViT-B/32
DEVICE=auto
FAISS_INDEX_TYPE=IndexFlatIP
FAISS_DIMENSION=512
DEFAULT_TOP_K=10
DEFAULT_ALPHA=0.5
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file with your configuration")

def main():
    """Main setup function"""
    print("üöÄ Multimodal Fashion Retrieval System - Configuration Setup")
    print("=" * 60)
    print("This script will help you configure the system with your credentials.")
    print()
    
    # Check if config already exists
    if Path("config.py").exists():
        response = input("config.py already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    try:
        # Get configuration from user
        supabase_url, supabase_key = setup_supabase()
        github_repo = setup_github()
        
        # Update files
        update_config_file(supabase_url, supabase_key, github_repo)
        create_env_file(supabase_url, supabase_key, github_repo)
        
        print("\nüéâ Configuration setup completed!")
        print("\nüìã Next steps:")
        print("1. Run validation: python3 validate_setup.py")
        print("2. Test the system: python3 run_search.py query --query_image test_images/WOMEN-Tees_Tanks-id_00005085-31_4_full.jpg --top_k 5")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 